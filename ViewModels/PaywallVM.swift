//
//  PaywallVM.swift
//  Daily Vibes
//
//  Created by Ahmet Hakan AltÄ±parmak on 25.09.2025.
//

import Foundation
import Combine
import StoreKit

@MainActor
final class PaywallVM: ObservableObject {
    @Published var isPurchasing = false
    @Published var errorMessage: String?
    let store: StoreService

    init(store: StoreService) {
        self.store = store
        Task { await store.loadProducts() }
    }


    func buy() {
        Task { @MainActor in
            isPurchasing = true
            errorMessage = nil // BaÅŸlangÄ±Ã§ta hata mesajÄ±nÄ± temizle
            // defer { isPurchasing = false } // Hata mesajÄ± gÃ¶sterilecekse hemen false yapmayalÄ±m

            do {
                try await store.buyProSubscription()
                // BaÅŸarÄ±lÄ± olursa purchasing'i false yap
                isPurchasing = false
            } catch {
                isPurchasing = false // Hata durumunda da false yap
                print("ğŸ›‘ PaywallVM: SatÄ±n alma hatasÄ± yakalandÄ±: \(error)")

                let nsError = error as NSError // HatayÄ± NSError'a Ã§evirelim

                // 1. Ã–NCELÄ°K: StoreKit'in kendi domain'indeki (SKErrorDomain) hatalarÄ± kodlarÄ±na gÃ¶re iÅŸle
                if nsError.domain == SKErrorDomain {
                    switch nsError.code {
                    case SKError.unknown.rawValue:
                        errorMessage = "Bilinmeyen bir satÄ±n alma hatasÄ± oluÅŸtu."
                    case SKError.clientInvalid.rawValue:
                        errorMessage = "SatÄ±n alma iÅŸlemi baÅŸlatÄ±lamadÄ±."
                    case SKError.paymentCancelled.rawValue:
                        errorMessage = nil // KullanÄ±cÄ± iptal etti
                    case SKError.paymentInvalid.rawValue:
                        errorMessage = "Ã–deme bilgileri geÃ§ersiz."
                    case SKError.paymentNotAllowed.rawValue:
                        errorMessage = "SatÄ±n alma yetkiniz yok."
                    case SKError.storeProductNotAvailable.rawValue:
                        errorMessage = "ÃœrÃ¼n maÄŸazada mevcut deÄŸil."
                    default:
                        if nsError.domain == SKErrorDomain && nsError.code == 5 {
                            errorMessage = "AÄŸ hatasÄ± oluÅŸtu. Ä°nternet baÄŸlantÄ±nÄ±zÄ± kontrol edin."
                        } else {
                            errorMessage = "Bir StoreKit sorunu oluÅŸtu (Kod: \(nsError.code)). \(error.localizedDescription)"
                        }
                    }
                // 2. Ã–NCELÄ°K: Bizim tanÄ±mladÄ±ÄŸÄ±mÄ±z StoreService hatalarÄ±
                } else if let storeError = error as? StoreService.StoreError {
                     switch storeError {
                     case .productNotFound:
                         errorMessage = "Abonelik Ã¼rÃ¼nÃ¼ bulunamadÄ±. LÃ¼tfen daha sonra tekrar deneyin."
                     case .verificationFailed:
                         errorMessage = "SatÄ±n alma doÄŸrulanamadÄ±. LÃ¼tfen tekrar deneyin."
                     case .paymentPending:
                         errorMessage = "Ã–deme beklemede (Ask to Buy vb.). OnaylandÄ±ÄŸÄ±nda eriÅŸiminiz aÃ§Ä±lacaktÄ±r."
                     case .unknown:
                          errorMessage = "SatÄ±n alma sonucu bilinmiyor."
                     }
                // 3. Ã–NCELÄ°K: DiÄŸer tÃ¼m hatalar
                } else {
                     errorMessage = "SatÄ±n alma baÅŸarÄ±sÄ±z oldu. LÃ¼tfen tekrar deneyin. (\(error.localizedDescription))"
                }
            }
        }
    }

    func restore() {
        Task { @MainActor in
            isPurchasing = true; defer { isPurchasing = false }
            errorMessage = nil // BaÅŸlangÄ±Ã§ta temizle
            await store.restore()
            if store.isProUnlocked {
                errorMessage = "SatÄ±n alÄ±mlar baÅŸarÄ±yla geri yÃ¼klendi." // BaÅŸarÄ±
            } else {
                errorMessage = "Geri yÃ¼klenecek aktif bir abonelik bulunamadÄ±." // Bilgi
            }
        }
    }
}
